<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.BasStudentMapper">
    
    <resultMap type="BasStudent" id="BasStudentResult">
        <result property="name"    column="name"    />
        <result property="studentId"    column="student_id"    />
        <result property="userId"    column="user_id"    />
        <result property="classId"    column="class_id"    />
        <result property="code"    column="code"    />
        <result property="type"    column="type"    />
        <result property="status"    column="status"    />
        <result property="gender"    column="gender"    />
    </resultMap>

    <sql id="selectBasStudentVo">
        select name, student_id, user_id, class_id, code, type, status, gender from bas_student
    </sql>

    <select id="selectBasStudentList" parameterType="BasStudent" resultMap="BasStudentResult">
        <include refid="selectBasStudentVo"/>
        <where>  
            <if test="name != null  and name != ''"> and name like concat('%', #{name}, '%')</if>
            <if test="userId != null "> and user_id = #{userId}</if>
            <if test="classId != null "> and class_id = #{classId}</if>
            <if test="code != null  and code != ''"> and code = #{code}</if>
            <if test="type != null  and type != ''"> and type = #{type}</if>
            <if test="status != null  and status != ''"> and status = #{status}</if>
            <if test="gender != null  and gender != ''"> and gender = #{gender}</if>
        </where>
    </select>
    
    <select id="selectBasStudentByStudentId" parameterType="Long" resultMap="BasStudentResult">
        <include refid="selectBasStudentVo"/>
        where student_id = #{studentId}
    </select>
        
    <insert id="insertBasStudent" parameterType="BasStudent" useGeneratedKeys="true" keyProperty="studentId">
        insert into bas_student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">name,</if>
            <if test="userId != null">user_id,</if>
            <if test="classId != null">class_id,</if>
            <if test="code != null and code != ''">code,</if>
            <if test="type != null and type != ''">type,</if>
            <if test="status != null">status,</if>
            <if test="gender != null">gender,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">#{name},</if>
            <if test="userId != null">#{userId},</if>
            <if test="classId != null">#{classId},</if>
            <if test="code != null and code != ''">#{code},</if>
            <if test="type != null and type != ''">#{type},</if>
            <if test="status != null">#{status},</if>
            <if test="gender != null">#{gender},</if>
         </trim>
    </insert>

    <update id="updateBasStudent" parameterType="BasStudent">
        update bas_student
        <trim prefix="SET" suffixOverrides=",">
            <if test="name != null">name = #{name},</if>
            <if test="userId != null">user_id = #{userId},</if>
            <if test="classId != null">class_id = #{classId},</if>
            <if test="code != null and code != ''">code = #{code},</if>
            <if test="type != null and type != ''">type = #{type},</if>
            <if test="status != null">status = #{status},</if>
            <if test="gender != null">gender = #{gender},</if>
        </trim>
        where student_id = #{studentId}
    </update>

    <delete id="deleteBasStudentByStudentId" parameterType="Long">
        delete from bas_student where student_id = #{studentId}
    </delete>

    <delete id="deleteBasStudentByStudentIds" parameterType="String">
        delete from bas_student where student_id in 
        <foreach item="studentId" collection="array" open="(" separator="," close=")">
            #{studentId}
        </foreach>
    </delete>
</mapper>